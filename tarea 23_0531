# test_users.py
import pytest

class UserManager:
    def __init__(self):
        self.users = {}

    def add_user(self, name):
        if name in self.users:
            raise ValueError("User already exists")
        self.users[name] = True

    def remove_user(self, name):
        if name not in self.users:
            raise ValueError("User does not exist")
        del self.users[name]

@pytest.fixture
def user_manager():
    return UserManager()

def test_add_user_success(user_manager):
    user_manager.add_user("Alice")
    assert "Alice" in user_manager.users, "Error: El usuario Alice no se agregó correctamente."
    print("Test para agregar usuario exitoso pasó correctamente.")

def test_add_user_failure(user_manager):
    user_manager.add_user("Bob")
    with pytest.raises(ValueError, match="User already exists"):
        user_manager.add_user("Bob")
    print("Test para agregar usuario fallido pasó correctamente.")

def test_remove_user_success(user_manager):
    user_manager.add_user("Charlie")
    user_manager.remove_user("Charlie")
    assert "Charlie" not in user_manager.users, "Error: El usuario Charlie no se eliminó correctamente."
    print("Test para eliminar usuario exitoso pasó correctamente.")

def test_remove_user_failure(user_manager):
    with pytest.raises(ValueError, match="User does not exist"):
        user_manager.remove_user("Dave")
    print("Test para eliminar usuario fallido pasó correctamente.")
